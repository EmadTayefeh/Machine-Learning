{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "-Uz7ubrhDQp4"
      ],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EmadTayefeh/Machine-Learning/blob/master/Preparing_Data_Towards_1D_Beysian_Algorithm\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5-VlsECYDQpF"
      },
      "source": [
        "# Import packages"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H1aHT0uEGx6E"
      },
      "source": [
        "from google.colab import drive, auth\n",
        "auth.authenticate_user()\n",
        "import requests\n",
        "gcloud_token = !gcloud auth print-access-token\n",
        "drive.mount('/content/drive', force_remount=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nmh7KRlK2Ila"
      },
      "source": [
        "with open('/content/drive/My Drive/Colab Notebooks/Assignment_1_Script.py') as infile:\n",
        "    exec(infile.read())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T_x6RsGsDQpN"
      },
      "source": [
        "# Function Definitions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HljbWIP4DQpY"
      },
      "source": [
        "### Histogram Functions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-AiIomTDDQpc"
      },
      "source": [
        "def Build1DHistogramClassifier(X,T,B,minheight,maxheight):\n",
        "    HF=np.zeros(B).astype('int32');\n",
        "    HM=np.zeros(B).astype('int32');\n",
        "    binindices=(np.round(((B-1)*(X-minheight)/(maxheight-minheight)))).astype('int32');\n",
        "    for i,b in enumerate(binindices):\n",
        "        if T[i]=='Female':\n",
        "            HF[b]+=1;\n",
        "        else:\n",
        "            HM[b]+=1;\n",
        "    return [HF, HM]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zzLIrvrGDQpe"
      },
      "source": [
        "def Apply1DHistogramClassifier(queries,HF,HM,minheight,maxheight):\n",
        "    B=np.alen(HF);\n",
        "    binindices=np.clip((np.round(((B-1)*(queries-minheight)/(maxheight-minheight)))).astype('int32'),0,B-1);\n",
        "    countF=HF[binindices];\n",
        "    countM=HM[binindices];\n",
        "    resultlabel=np.full(np.alen(binindices),\"Indeterminate\",dtype=object);\n",
        "    resultprob=np.full(np.alen(binindices),np.nan,dtype=object);\n",
        "    indicesF=countF>countM;\n",
        "    indicesM=countM>countF;\n",
        "    resultlabel[indicesF]=\"Female\";\n",
        "    resultlabel[indicesM]=\"Male\";\n",
        "    probF=countF/(countF+countM);\n",
        "    probM=countM/(countF+countM);\n",
        "    resultprob[indicesF]=probF[indicesF];\n",
        "    resultprob[indicesM]=probM[indicesM];\n",
        "    return resultlabel, resultprob"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XOXItPwlDQpf"
      },
      "source": [
        "### Bayesian Functions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HBpHaew3DQpl"
      },
      "source": [
        "# Prepare Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mrv1nPiPDQpm"
      },
      "source": [
        "excelfile = '/content/drive/My Drive/Data/Assignment_1_Data_and_Template.xlsx'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GuCRL2RiDQpo"
      },
      "source": [
        "data=readExcel(excelfile)\n",
        "X=np.array(data[:,0]*12+data[:,1],dtype=float)\n",
        "T=np.array(data[:,2])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ol0DtkURDQpq"
      },
      "source": [
        "queries=(readExcel(excelfile,\n",
        "                  sheetname='Queries',\n",
        "                  startrow=3,\n",
        "                  endrow=8,\n",
        "                  startcol=1,\n",
        "                  endcol=1)).astype(float);queries"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9MUvwpVPDQpt"
      },
      "source": [
        "# Full Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Sa4FX3PGDQpt"
      },
      "source": [
        "### Full Data Histogram Classifier"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y0q9115ADQpu"
      },
      "source": [
        "B=32\n",
        "minheight=np.amin(X)\n",
        "maxheight=np.amax(X)\n",
        "[HF,HM]=Build1DHistogramClassifier(X,T,B,minheight,maxheight)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4LUozG3e3zRc"
      },
      "source": [
        "showHistograms(HF, HM, minheight, maxheight)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A5QxJvnNDQp1"
      },
      "source": [
        "[GH, PH]=Apply1DHistogramClassifier(queries,HF,HM,minheight,maxheight)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "RP0r11jhDQp2"
      },
      "source": [
        "showResult(queries, GH, PH)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Uz7ubrhDQp4"
      },
      "source": [
        "### Partial Data Histogram Classifier"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ay2AqcSjKe_g"
      },
      "source": [
        "X50=X[:50]\n",
        "T50=T[:50]\n",
        "[HF50,HM50]=Build1DHistogramClassifier(X50,T50,B,minheight,maxheight)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mvLEI8OyKqLB"
      },
      "source": [
        "showHistograms(HF50, HM50, minheight, maxheight)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xJemZtIiK4po"
      },
      "source": [
        "[GH50, PH50]=Apply1DHistogramClassifier(queries,HF50,HM50,minheight,maxheight)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "gZaN_CLUK4pv"
      },
      "source": [
        "showResult(queries, GH50, PH50)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u5Q0WOCGLRPl"
      },
      "source": [
        "### Full Data Bayesian Classifier"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dMJ4W1MTNyOk"
      },
      "source": [
        "def Build1DBayesianClassifier(X, T):\n",
        "  muF = np.mean(X[T == 'Female'])\n",
        "  muM = np.mean(X[T == 'Male'])\n",
        "  sigmaF = np.std(X[T == 'Female'], ddof=1)\n",
        "  sigmaM = np.std(X[T == 'Male'], ddof=1)\n",
        "  NF = len(X[T == 'Female'])\n",
        "  NM = len(X[T == 'Male'])\n",
        "  return [muF, muM, sigmaF, sigmaM, NF, NM]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7kVqvoXAQHGF"
      },
      "source": [
        "[muF, muM, sigmaF, sigmaM, NF, NM] = Build1DBayesianClassifier(X, T)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AimHFWHPQMbK"
      },
      "source": [
        "[muF, muM, sigmaF, sigmaM, NF, NM]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hKL4VG2gSf9a"
      },
      "source": [
        "def pdf(x, mu, sigma):\n",
        "  factor = 1/(np.sqrt(2*np.pi)*sigma)\n",
        "  return factor*np.exp(-0.5*((x-mu)/sigma)**2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2dtKGtwbTW8L"
      },
      "source": [
        "pdf(0, 0, 1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PwP_5RS2UCRQ"
      },
      "source": [
        "def Apply1DBayesianClassifier(queries,muF, muM, sigmaF, sigmaM, NF, NM):\n",
        "    w=1\n",
        "    countF = NF*w*pdf(queries, muF, sigmaF)\n",
        "    countM = NM*w*pdf(queries, muM, sigmaM)\n",
        "    resultlabel=np.full(np.alen(queries),\"Indeterminate\",dtype=object);\n",
        "    resultprob=np.full(np.alen(queries),np.nan,dtype=object);\n",
        "    indicesF=countF>countM;\n",
        "    indicesM=countM>countF;\n",
        "    resultlabel[indicesF]=\"Female\";\n",
        "    resultlabel[indicesM]=\"Male\";\n",
        "    probF=countF/(countF+countM);\n",
        "    probM=countM/(countF+countM);\n",
        "    resultprob[indicesF]=probF[indicesF];\n",
        "    resultprob[indicesM]=probM[indicesM];\n",
        "    return resultlabel, resultprob"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ULLxfHtuUaYp"
      },
      "source": [
        "[GB, PB]= Apply1DBayesianClassifier(queries,muF, muM, sigmaF, sigmaM, NF, NM)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "naoY_-S0UlAh"
      },
      "source": [
        "showResult(queries, GB, PB)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tl3WiusULlf7"
      },
      "source": [
        "### Partial Data Bayesian Classifier"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XonJJ24UU2AJ"
      },
      "source": [
        "[muF50, muM50, sigmaF50, sigmaM50, NF50, NM50] = Build1DBayesianClassifier(X50, T50)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Zb9rtrZU93i"
      },
      "source": [
        "[GB50, PB50]= Apply1DBayesianClassifier(queries,muF50, muM50, sigmaF50, sigmaM50, NF50, NM50)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ztao37aUVFML"
      },
      "source": [
        "showResult(queries, GB50, PB50)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pyGdFtXUMhbV"
      },
      "source": [
        "### Summary"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z05Ob834VJXl"
      },
      "source": [
        "showAllResults(queries, GH, PH, GH50, PH50, GB, PB, GB50, PB50)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MYHEeY5tM-8Y"
      },
      "source": [
        "### Export Results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WuZ6jFBnpe4W"
      },
      "source": [
        "check_all_vars(all_vars)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PArDJxunNDCj"
      },
      "source": [
        "print(\"Please wait. Writing to Excel ...\")\n",
        "writeExcelData([minheight,maxheight],excelfile,'Classifiers - Full Data',1,2)\n",
        "writeExcelData([HF],excelfile,'Classifiers - Full Data',5,3)\n",
        "writeExcelData([HM],excelfile,'Classifiers - Full Data',6,3)\n",
        "writeExcelData([muF,muM],excelfile,'Classifiers - Full Data',8,3)\n",
        "writeExcelData([sigmaF,sigmaM],excelfile,'Classifiers - Full Data',11,3)\n",
        "writeExcelData([NF,NM],excelfile,'Classifiers - Full Data',14,3)\n",
        "print(\"Written Sheet \\'Classifiers - Full Data\\'\")\n",
        "\n",
        "writeExcelData([minheight,maxheight],excelfile,'Classifiers - Partial Data',1,2)\n",
        "writeExcelData([HF50],excelfile,'Classifiers - Partial Data',5,3)\n",
        "writeExcelData([HM50],excelfile,'Classifiers - Partial Data',6,3)\n",
        "writeExcelData([muF50,muM50],excelfile,'Classifiers - Partial Data',8,3)\n",
        "writeExcelData([sigmaF50,sigmaM50],excelfile,'Classifiers - Partial Data',11,3)\n",
        "writeExcelData([NF50,NM50],excelfile,'Classifiers - Partial Data',14,3)\n",
        "print(\"Written Sheet \\'Classifiers - Partial Data\\'\")\n",
        "\n",
        "writeExcelData(list(zip(*[GH,PH,GB,PB])),excelfile,'Queries',3,2)\n",
        "writeExcelData(list(zip(*[GH50,PH50,GB50,PB50])),excelfile,'Queries',12,2)\n",
        "print(\"Written Sheet \\'Queries\\'\")\n",
        "closeExcelFile(excelfile)\n",
        "print(\"DONE!\")"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}